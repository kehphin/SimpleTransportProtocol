#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json

MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 5
SEQUENCE = 0
PACKET_WINDOW = 3
SENDING_BUFFER = {}
SACK_COUNTER = 0
SACK_SEQUENCE = None

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.settimeout(TIMEOUT)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

def send_next_packet():
  global SEQUENCE
  global SENDING_BUFFER
  global SACK_SEQUENCE
  global SACK_COUNTER

  # determine what data we are sending - a repeat packet or a new packet
  if SACK_COUNTER >= 3:
    data = SENDING_BUFFER[SACK_SEQUENCE]
    SACK_COUNTER = 0
  else:
    # reading only DATA_SIZE bits at a time
    data = sys.stdin.read(DATA_SIZE)
    # add to sending buffer, remove if we get the ack back
    SENDING_BUFFER[SEQUENCE] = data

  if (len(data) > 0):
    # message object
    msg = json.dumps({"sequence": SEQUENCE, "data": data, "ack": False, "eof": False})
    # offset
    SEQUENCE += len(data)

    # send message
    if sock.sendto(msg, dest) < len(msg):
      log("[error] unable to fully send packet")
    else:
      log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
    return True
  else:
    return False

def send_next_packets():
  for x in xrange(0, PACKET_WINDOW):
    send_next_packet()

def handle_acks(ackArray):
  global SENDING_BUFFER
  global SACK_COUNTER
  global SACK_SEQUENCE

  for ackObj in ackArray:
    ackSeq = ackObj['ack'] 
    if ackSeq in SENDING_BUFFER:
      log("[recv ack] " + str(ackSeq))
      del SENDING_BUFFER[ackSeq]
    if ackObj['sack']:
      if ackObj['sack'] == SACK_SEQUENCE:
        SACK_COUNTER += 1
      else:
        SACK_SEQUENCE = ackObj['sack']
        SACK_COUNTER = 1

# Send first packets
send_next_packets()

# Now read in data, send packets
while True:
  log("ABOUT TO SLEEP")
  # receiving ack from receiver
  result = sock.recvfrom(MSG_SIZE)

  if result:
    (data, addr) = result
    try:
      decoded = json.loads(data)
      handle_acks(decoded['acks'])

      # Try to send next packet; break if no more data
      if (not send_next_packet()):
        break
    except (ValueError, KeyError, TypeError):
      log("[recv corrupt packet]")
  else:
    log("[error] timeout")
    sys.exit(-1)

sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}), dest)
sys.exit(0)
