#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

MSG_SIZE = 1500
TIMEOUT = 30

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = 0

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))


# message queue
queue = {}
expectedSequenceNum = 0

# Now listen for packets
while True:
  result = sock.recvfrom(MSG_SIZE)

  # If nothing is ready, we hit the timeout
  if result:
    (data, addr) = result

    try:
      # received message object
      decoded = json.loads(data)

      sequenceNum = decoded['sequence']
      msgData = decoded['data']
      dataLength = len(msgData)

      # if in order, we output normally
      if expectedSequenceNum == sequenceNum:
        # If the EOF flag is set, exit
        if (decoded['eof']):
          log("[completed]")
          sys.exit(0)

        # If there is data, we accept it and print it out
        if (decoded['data']):
          # If we receive data, we assume it's in-order
          # You will need to do much more here
          log("[recv data] " + str(sequenceNum) + " (" + str(dataLength) + ") ACCEPTED (in-order)")
          sys.stdout.write(decoded['data'])
          expectedSequenceNum += dataLength

        # Send back an ack to the sender
        msg = json.dumps({"ack": decoded['sequence'] + len(msgData)})
        log("ABOUT TO SEND " + msg)
        if sock.sendto(msg, addr) < len(msg):
          log("[error] unable to fully send packet")

        # Go through queued packets and see if we have the next packet(s)
        while expectedSequenceNum in queue:
          queueItemData = queue[expectedSequenceNum]
          log("[recv data] " + str(sequenceNum) + " (" + str(dataLength) + ") ACCEPTED (out-order)")
          sys.stdout.write(decoded['data'])
          expectedSequenceNum += len(queueItemData)

      # we received an out of order packet - we add to the queue to processing at a later time
      else:
        queue[sequenceNum] = msgData

        msg = json.dumps({"ack": decoded['sequence'] + len(msgData), "sack": expectedSequenceNum})
        log("ABOUT TO SEND " + msg)
        if sock.sendto(msg, addr) < len(msg):
          log("[error] unable to fully send packet")

    except (ValueError, KeyError, TypeError) as e:
      log("[recv corrupt packet]")
      raise e
  else:
    log("[error] timeout")
    sys.exit(-1)
